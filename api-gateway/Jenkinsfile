pipeline {
    agent {
        docker {
            image 'maven:3.8.5-openjdk-17'
            args '-v /root/.m2:/root/.m2' // Cache local de dependencias Maven
        }
    }

    environment {
        DOCKERHUB_USERNAME = 'juansmc'
        SERVICE_NAME = 'api-gateway'
        IMAGE_NAME = "${DOCKERHUB_USERNAME}/api-gateway-ecommerce-boot"
        IMAGE_TAG = "dev-${env.BUILD_NUMBER}"
        KUBE_NAMESPACE = 'development'
        DOCKER_CREDENTIALS_ID = 'dockerhub-creds'
        KUBE_MANIFESTS_DIR = 'k8s'
        KUBE_DEPLOYMENT_FILE = "${KUBE_MANIFESTS_DIR}/${SERVICE_NAME}-container-deployment.yaml"
        KUBE_SERVICE_FILE = "${KUBE_MANIFESTS_DIR}/${SERVICE_NAME}-service.yaml"
    }

    stages {
        stage('1. Checkout') {
            steps {
                echo "Clonando el repositorio..."
                checkout scm
                echo "Checkout completado para la rama: ${env.BRANCH_NAME}"
            }
        }

        stage('2. Maven Build & Test') {
            steps {
                dir("${env.SERVICE_NAME}") {
                    script {
                        if (env.BRANCH_NAME == 'stage') {
                            echo "Ejecutando build con tests para stage..."
                            sh 'mvn clean verify'
                        } else {
                            echo "Ejecutando build sin tests para dev..."
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('3. Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', env.DOCKER_CREDENTIALS_ID) {
                        dir("${env.SERVICE_NAME}") {
                            def customImage = docker.build("${env.IMAGE_NAME}:${env.IMAGE_TAG}", ".")
                            customImage.push()
                        }
                    }
                    echo "Imagen Docker subida exitosamente: ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                }
            }
        }

        stage('4. Update K8s Manifests') {
            steps {
                echo "Actualizando el manifiesto de despliegue..."
                sh "sed -i 's|image: .*|image: ${env.IMAGE_NAME}:${env.IMAGE_TAG}|g' ${env.KUBE_DEPLOYMENT_FILE}"
                sh "cat ${env.KUBE_DEPLOYMENT_FILE}"
            }
        }

        stage('5. Deploy to Dev K8s') {
            steps {
                echo "Desplegando en Kubernetes (namespace: ${env.KUBE_NAMESPACE})..."
                sh "kubectl apply -f ${env.KUBE_SERVICE_FILE} -n ${env.KUBE_NAMESPACE}"
                sh "kubectl apply -f ${env.KUBE_DEPLOYMENT_FILE} -n ${env.KUBE_NAMESPACE}"
                sh "kubectl rollout status deployment/${env.SERVICE_NAME}-container -n ${env.KUBE_NAMESPACE} --timeout=120s"
                echo "¡Despliegue exitoso!"
            }
        }
    }

    post {
        always {
            echo 'Limpiando workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completado exitosamente.'
        }
        failure {
            echo 'El pipeline falló.'
        }
    }
}
